<?php

require_once dirname(__FILE__) . '/../lib/SmartlingAPI.php';

/**
 * Test class for SmartlingAPI.
 * Generated by PHPUnit on 2013-10-17 at 14:51:02.
 */
class SmartlingAPITest extends PHPUnit_Framework_TestCase {

    /**
     * @var SmartlingAPI
     */
    protected $object;
    protected $_apiKey = '';
    protected $_projectId = '';
    

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new SmartlingAPI($this->_apiKey, $this->_projectId);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }
    
    /**
     * 
     * @param object $object
     * @param string $methodName
     * @param array $parameters
     * @return string | null | int | object | bool | resource | float 
     */
    public function invokeMethod(&$object, $methodName, array $parameters = array())
    {
        $reflection = new ReflectionClass(get_class($object));
        $method = $reflection->getMethod($methodName);
        $method->setAccessible(true);

        return $method->invokeArgs($object, $parameters);
    }

    /**
     * @covers SmartlingAPI::uploadFile
     * @todo Implement testUploadFile().
     */
    public function testUploadFile() {
        // Remove the following lines when you implement this test.
        
        $this->assertNotEmpty(
                $this->object->uploadFile('../test.xml', 'xml', 'testing.xml')
                );        
       
         $this->assertInternalType(
                'string',
                $this->object->getStatus('testing.xml', "ru_RU")
                );
    }   

    /**
     * @covers SmartlingAPI::downloadFile
     * @todo Implement testDownloadFile().
     */
    public function testDownloadFile() {
        // Remove the following lines when you implement this test.
        $this->assertNotEmpty(
            $this->object->downloadFile('testing.xml', 'ru_RU')
        );
        
        $this->assertInternalType(
                'string',
                $this->object->downloadFile('testing.xml', 'ru_RU')
                );
    }

    /**
     * @covers SmartlingAPI::getStatus
     * @todo Implement testGetStatus().
     */
    public function testGetStatus() {
        // Remove the following lines when you implement this test.
        $this->assertNotEmpty(
                $this->object->getStatus('testing.xml', "ru_RU")
        );
        
        $this->assertInternalType(
                'string',
                $this->object->getStatus('testing.xml', "ru_RU")
                );
    }

    /**
     * @covers SmartlingAPI::getList
     * @todo Implement testGetList().
     */
    public function testGetList() {
        
        $this->assertNotEmpty(
                $this->object->getList("ru_RU")
        );
        
        $this->assertInternalType(
                'string',
                $this->object->getList("ru_RU")
                );
    }

    /**
     * @covers SmartlingAPI::renameFile
     * @todo Implement testRenameFile().
     */
    public function testRenameFile() {
       
        $this->assertNotEmpty(
                $this->object->renameFile('testing.xml', 'newTestFile.xml')
        );
        
        $this->assertInternalType(
                'string',
                $this->object->renameFile('testing.xml', 'newTestFile.xml')
                );
    }
    
    /**
     * @covers SmartlingAPI::import
     */
    public function testImport(){
        $this->assertNotEmpty(
                $this->object->import('translated.xml', 'xml', 'ru-RU', '../test.xml', true, 'PUBLISHED')
        );
        
        $this->assertInternalType(
                'string',
                $this->object->import('translated.xml', 'xml', 'ru-RU', '../test.xml', true, 'PUBLISHED')
                );
    }

    /**
     * @covers SmartlingAPI::deleteFile
     * @todo Implement testDeleteFile().
     */
    public function testDeleteFile() {
        
        $this->assertNotEmpty(
                $this->object->deleteFile('newTestFile.xml')
        );
        
        $this->assertInternalType(
                'string',
                $this->object->deleteFile('newTestFile.xml')
                );
    }

    
    /**
     * @covers SmartlingAPI::uploadFile
     */
    public function testUploadFileSuccess(){
        $this->object->uploadFile('../test.xml', 'xml', 'testing.xml');
        $this->assertTrue(
                "SUCCESS" == $this->object->getCodeStatus()
                );
    }    
    
    /**
     * SmartlingAPI::getStatus
     */
    public function testGetStatusSuccess(){
       $this->object->getStatus('testing.xml', "ru-RU");
        $this->assertTrue(
                "SUCCESS" == $this->object->getCodeStatus()
                );
    }
    
    /**
     * SmartlingAPI::getList 
     */
    public function testGetListSuccess(){
        $this->object->getList("ru-RU");
        $this->assertTrue(
                "SUCCESS" == $this->object->getCodeStatus()
                );
    }
    
    /**
     * @covers SmartlingAPI::renameFile
     */
    public function testRenameFileSuccess(){
        $this->object->renameFile('testing.xml', 'newTestFile.xml');
        $this->assertTrue(
                "SUCCESS" == $this->object->getCodeStatus()
                );
    }
    
    /**
     * @covers SmartlingAPI::deleteFile
     */
    public function testDeleteFileSuccess(){
        $this->object->deleteFile('newTestFile.xml');
        $this->assertTrue(
                "SUCCESS" == $this->object->getCodeStatus()
                );
    }
    
    /**
     * @covers SmartlingAPI::sendRequest
     */
    public function testSendRequest(){
        
        //check response type
        $this->assertInternalType(
                'string',
                $this->invokeMethod($this->object, 'sendRequest', array(
                    '',
                    array(),
                    'POST'
                ))
                );
        
        //check not equals false
        $this->assertNotEquals(
                false,
                $this->invokeMethod($this->object, 'sendRequest', array(
                    '',
                    array(),
                    'POST'
                ))
                );
        
    }
    
    /**
     * @covers SmartlingAPI::getCodeStatus
     */
    public function testGetCodeStatus(){
        
        $this->invokeMethod($this->object, 'sendRequest', array(
                    '',
                    array(),
                    'POST'
                ));
        
        //check response type
        $this->assertInternalType(
                'string',
                $this->object->getCodeStatus()
                );
        
        //not equals false
        $this->assertNotEquals(
                false,
                $this->object->getCodeStatus()
                );
    }
}

?>
